# The configurations that used for the recording, feel free to edit them
config:

  # Specify a command to be executed
  # like `/bin/bash -l`, `ls`, or any other commands
  # the default is bash for Linux
  # or powershell.exe for Windows
  command: bash -l
  
  # Specify the current working directory path
  # the default is the current working directory path
  cwd: /home/hassan
  
  # Export additional ENV variables
  env:
    recording: true
  
  # Explicitly set the number of columns
  # or use `auto` to take the current
  # number of columns of your shell
  cols: 90
  
  # Explicitly set the number of rows
  # or use `auto` to take the current
  # number of rows of your shell
  rows: 16
  
  # Amount of times to repeat GIF
  # If value is -1, play once
  # If value is 0, loop indefinitely
  # If value is a positive number, loop n times
  repeat: 0
  
  # Quality
  # 1 - 100
  quality: 100
  
  # Delay between frames in ms
  # If the value is `auto` use the actual recording delays
  frameDelay: auto
  
  # Maximum delay between frames in ms
  # Ignored if the `frameDelay` isn't set to `auto`
  # Set to `auto` to prevent limiting the max idle time
  maxIdleTime: 2000
  
  # The surrounding frame box
  # The `type` can be null, window, floating, or solid`
  # To hide the title use the value null
  # Don't forget to add a backgroundColor style with a null as type
  frameBox:
    type: floating
    title: Terminalizer
    style:
      border: 0px black solid
      # boxShadow: none
      # margin: 0px
  
  # Add a watermark image to the rendered gif
  # You need to specify an absolute path for
  # the image on your machine or a URL, and you can also
  # add your own CSS styles
  watermark:
    imagePath: null
    style:
      position: absolute
      right: 15px
      bottom: 15px
      width: 100px
      opacity: 0.9
  
  # Cursor style can be one of
  # `block`, `underline`, or `bar`
  cursorStyle: block
  
  # Font family
  # You can use any font that is installed on your machine
  # in CSS-like syntax
  fontFamily: "Monaco, Lucida Console, Ubuntu Mono, Monospace"
  
  # The size of the font
  fontSize: 20
  
  # The height of lines
  lineHeight: 1
  
  # The spacing between letters
  letterSpacing: 0
  
  # Theme
  theme:
    background: "transparent"
    foreground: "#afafaf"
    cursor: "#c7c7c7"
    black: "#232628"
    red: "#fc4384"
    green: "#b3e33b"
    yellow: "#ffa727"
    blue: "#75dff2"
    magenta: "#ae89fe"
    cyan: "#708387"
    white: "#d5d5d0"
    brightBlack: "#626566"
    brightRed: "#ff7fac"
    brightGreen: "#c8ed71"
    brightYellow: "#ebdf86"
    brightBlue: "#75dff2"
    brightMagenta: "#ae89fe"
    brightCyan: "#b1c6ca"
    brightWhite: "#f9f9f4"
  
# Records, feel free to edit them
records:
  - delay: 597
    content: "\e]0;hassan@lenovo:~\e\\\e]7;file://lenovo/home/hassan\e\\\e[?2004h\e[32mhassan@lenovo\e[00m:\e[34m~\e[31m\e[00m$ "
  - delay: 508
    content: c
  - delay: 216
    content: o
  - delay: 183
    content: e
  - delay: 136
    content: 'n'
  - delay: 209
    content: v
  - delay: 120
    content: ' '
  - delay: 880
    content: h
  - delay: 143
    content: e
  - delay: 217
    content: l
  - delay: 127
    content: l
  - delay: 153
    content: o
  - delay: 466
    content: '/0.1@hu/stable '
  - delay: 1262
    content: "\r\n\e[?2004l\r"
  - delay: 241
    content: "\e[1m\e[35m\r\n======== Input profiles ========\e[0m\r\n\e[1m\e[36mProfile host:\e[0m\r\n[settings]\r\narch=x86_64\r\nbuild_type=Release\r\ncompiler=gcc\r\ncompiler.cppstd=gnu17\r\ncompiler.libcxx=libstdc++11\r\ncompiler.version=11\r\nos=Linux\r\n\e[0m\r\n\e[1m\e[36mProfile build:\e[0m\r\n[settings]\r\narch=x86_64\r\nbuild_type=Release\r\ncompiler=gcc\r\ncompiler.cppstd=gnu17\r\ncompiler.libcxx=libstdc++11\r\ncompiler.version=11\r\nos=Linux\r\n\e[0m\r\n\e[1m\e[35m\r\n======== Computing dependency graph ========\e[0m\r\n"
  - delay: 19
    content: "\e[1m\e[33mGraph root\e[0m\r\n\e[1m\e[36m    cli\e[0m\r\n\e[1m\e[33mRequirements\e[0m\r\n\e[1m\e[36m    hello/0.1@hu/stable#946a9eb988f99e9853d5feb2acb8fe0c - Cache\e[0m\r\n\e[1m\e[35m\r\n======== Computing necessary packages ========\e[0m\r\n\e[1m\e[33mRequirements\e[0m\r\n\e[1m\e[36m    hello/0.1@hu/stable#946a9eb988f99e9853d5feb2acb8fe0c:24318d598c2aa43c2494894e6c0ea0d428fd0cff#78aefd4b7a27ec0e1ea01d24339ed78d - Cache\e[0m\r\n\e[1m\e[35m\r\n======== Installing packages ========\e[0m\r\n\e[1m\e[32mhello/0.1@hu/stable:\e[0m \e[1m\e[32mAlready installed! (1 of 1)\e[0m\r\n\e[1m\e[35m\r\n======== Finalizing install (deploy, generators) ========\e[0m\r\n\e[1m\e[35mcli:\e[0m \e[1m\e[35mGenerating aggregated env files\e[0m\r\ncli:\e[0m Generated aggregated env files: ['conanbuild.sh', 'conanrun.sh']\e[0m\r\n\e[1m\e[32mInstall finished successfully\e[0m\r\n\e[0m"
  - delay: 30
    content: "\e]0;hassan@lenovo:~\e\\\e]7;file://lenovo/home/hassan\e\\\e[?2004h\e[32mhassan@lenovo\e[00m:\e[34m~\e[31m\e[00m$ "
  - delay: 1146
    content: h
  - delay: 151
    content: e
  - delay: 344
    content: l
  - delay: 129
    content: l
  - delay: 376
    content: o
  - delay: 1264
    content: "\r\n\e[?2004l\r"
  - delay: 23
    content: "hello/0.1: Hello World Release!\r\n  hello/0.1: __x86_64__ defined\r\n  hello/0.1: _GLIBCXX_USE_CXX11_ABI 1\r\n  hello/0.1: __cplusplus201703\r\n  hello/0.1: __GNUC__11\r\n  hello/0.1: __GNUC_MINOR__3\r\n\e]0;hassan@lenovo:~\e\\\e]7;file://lenovo/home/hassan\e\\\e[?2004h\e[32mhassan@lenovo\e[00m:\e[34m~\e[31m\e[00m$ "
  - delay: 5000
    content: ' '

